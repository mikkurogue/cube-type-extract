package gen

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

const (
	CUBEJS_API_URL = "http://localhost:4000/cubejs-api"
)

type Generator struct {
	FileName  string
	CubeCount int
	Metadata  CubeMetadata
}

type CubeMetadata struct {
	Cubes []Cube `json:"cubes"`
}

type Cube struct {
	Name       string     `json:"name"`
	Dimensions []FieldSet `json:"dimensions"`
	Measures   []FieldSet `json:"measures"`
}

// NOTE: Just doing this to test if we can filter dimensions and measures based on a meta prop
type Meta struct {
	Extractable bool `json:"Extractable"`
}

type FieldSet struct {
	Name string `json:"name"`
	Meta Meta   `json:"meta"`
}

func (g *Generator) FetchMetadata() {
	// Fetch Cube.js metadata
	resp, err := fetchCubejsMetadata()
	if err != nil {
		fmt.Println("Error fetching Cube.js metadata:", err)
		return
	}

	// Parse the metadata JSON - Assign metadata to the pointer
	if err := json.Unmarshal(resp, &g.Metadata); err != nil {
		fmt.Println("Error parsing Cube.js metadata:", err)
		return
	}

	// Also set the cube count here from metadata.
	g.CubeCount = len(g.Metadata.Cubes)

}

func (g *Generator) IterateToGenerate() {

	// Prepare output for TypeScript file
	var output strings.Builder
	var allDimensionTypes []string
	var allMeasureTypes []string

	for _, cube := range g.Metadata.Cubes {
		var dimensions []string
		var measures []string

		// Extract dimensions and measures without the Cube. prefix
		for _, dimension := range cube.Dimensions {
			if dimension.Meta.Extractable == true {
				dimensionName := extractName(dimension.Name)
				dimensions = append(dimensions, fmt.Sprintf("'%s'", dimensionName))
			}
		}

		for _, measure := range cube.Measures {
			if measure.Meta.Extractable == true {
				measureName := extractName(measure.Name)
				measures = append(measures, fmt.Sprintf("'%s'", measureName))
			}
		}

		if len(dimensions) != 0 && len(measures) != 0 {
			fileHeader := fmt.Sprintf("// This file is generated by the Cube Type Extracator - Do not modify!")

			// Generate TypeScript union types for this cube
			cubeName := capitalize(cube.Name)
			dimensionsTypeName := fmt.Sprintf("%sDimensions", cubeName)
			measuresTypeName := fmt.Sprintf("%sMeasures", cubeName)
			dimensionsType := fmt.Sprintf("export type %s = %s;", dimensionsTypeName, joinUnion(dimensions))
			measuresType := fmt.Sprintf("export type %s = %s;", measuresTypeName, joinUnion(measures))

			// Append to the output
			output.WriteString(fmt.Sprintf("%s\n\n%s\n\n%s\n\n", fileHeader, dimensionsType, measuresType))

			// Accumulate the type names for AllDimensions and AllMeasures
			allDimensionTypes = append(allDimensionTypes, dimensionsTypeName)
			allMeasureTypes = append(allMeasureTypes, measuresTypeName)
		} else {
			fmt.Println(fmt.Sprintf("Could not generate union type for cube: %v . Missing extractable property for either dimensions and/or measures", cube.Name))
		}
	}

	// generate all dims and measures as 1 massive union
	if len(allDimensionTypes) > 0 {
		allDimensionsType := fmt.Sprintf("export type AllDimensions = %s;", joinUnion(allDimensionTypes))
		output.WriteString(fmt.Sprintf("%s\n\n", allDimensionsType))
	}

	if len(allMeasureTypes) > 0 {
		allMeasuresType := fmt.Sprintf("export type AllMeasures = %s;", joinUnion(allMeasureTypes))
		output.WriteString(fmt.Sprintf("%s\n\n", allMeasuresType))
	}
	// Write to a TypeScript file
	if err := os.WriteFile(g.FileName+".ts", []byte(output.String()), 0644); err != nil {
		fmt.Println("Error writing TypeScript file:", err)
		return
	}

	fmt.Println(fmt.Sprintf("Generated %v.ts with Dimension and Measure union types for each Cube.", g.FileName))

}

func fetchCubejsMetadata() ([]byte, error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", fmt.Sprintf("%s/v1/meta", CUBEJS_API_URL), nil)
	if err != nil {
		return nil, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return body, nil
}

func extractName(fullName string) string {
	parts := strings.Split(fullName, ".")
	return parts[len(parts)-1] // Get the last part after splitting by "."
}

func joinUnion(items []string) string {
	return strings.Join(items, " | ")
}

func capitalize(str string) string {
	if len(str) == 0 {
		return str
	}
	return strings.ToUpper(string(str[0])) + str[1:]
}
